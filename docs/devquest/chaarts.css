@layer sliide, prism, sseeeedd, patches, examples;

@import "../sliide/sliide.css?4" layer(sliide);
@import "../sliide/prism.min.css" layer(prism);

@layer sliide {
	.chaarts-container > table:not(.chaarts) .sr-only {
		clip: auto;
		clip-path: none;
		height: auto;
		overflow: visible;
		position: static;
		width: auto;
		white-space: normal;
	}
}

@layer sseeeedd {
	:root {
		color-scheme: light;
		--neutral: 0 0%;
		--treshold: 60%;
		--right: 150;
		--light-scale: 1.61803398875;
		--lightness: 40%;
		--switch: calc((var(--lightness) - var(--treshold)) * -100);
		--brighter: calc(var(--lightness) * var(--light-scale));
		--darker: calc(var(--lightness) / var(--light-scale));
		--success-lighter: hsl(var(--right) 100% var(--brighter) / .4);
		--success-dark: hsl(var(--right) 100% var(--darker));
		--muted-lighter: hsl(var(--neutral) var(--brighter) / .5);
		--muted-dark: hsl(var(--neutral) var(--darker));
		--contrast-o-50: hsl(var(--neutral) var(--switch) / .5);
		--contrast-inverse: hsl(var(--neutral) calc(var(--switch) * -1));
	}

	button[role=switch] {
		background-color: var(--muted-lighter);
		border: 0;
		border-radius: 1.375rem;
		box-sizing: content-box;
		color: var(--muted-dark);
		contain: content;
		block-size: 2.75rem;
		line-height: 2.75rem;
		padding: 0 3rem;
		transition: all 0.3s var(--enter);
		inline-size: 4.75rem;
		will-change: background-color;
	}

	button[role=switch]::after,
	button[role=switch]::before {
		background: currentColor;
		block-size: 2.375rem;
		border-radius: 50%;
		content: "";
		position: absolute;
		inline-size: 2.375rem;
		inset-inline-start: 0.25rem;
		inset-block-start: 0.25rem;
		transform: none;
		transition: transform 0.3s var(--enter) 0s;
		will-change: transform;
	}

	button[role=switch]::after {
		background: var(--contrast-o-50);
		block-size: 1rem;
		inline-size: 1rem;
		inset-inline-start: 0.925rem;
		inset-block-start: 0.925rem;
		visibility: hidden;
	}

	button[role=switch]:hover,
	button[role=switch]:focus,
	button[role=switch]:active {
		background-color: var(--muted-lighter);
		color: var(--contrast-inverse);
	}

	button[role=switch]:hover::after,
	button[role=switch]:focus::after,
	button[role=switch]:active::after {
		visibility: visible;
	}

	button[role=switch][aria-checked=true] {
		background-color: var(--success-lighter);
	}

	button[role=switch][aria-checked=true]::before {
		background: var(--success-dark);
	}

	button[role=switch][aria-checked=true]::after,
	button[role=switch][aria-checked=true]::before {
		transform: translateX(calc((4.875rem + 3rem) * var(--is-rtl, 1)));
	}

	button[role=switch] > *:first-child,
	button[role=switch][aria-checked=true] > *:last-child {
		display: none;
	}

	button[role=switch][aria-checked=true] > *:first-child {
		display: block;
	}

	@media (prefers-contrast: more) {
		button[role=switch][aria-checked=false],
		button[role=switch]:hover,
		button[role=switch]:focus,
		button[role=switch]:active,
		button[role=switch]::after {
			background-color: CanvasText;
			color: Canvas;
		}

		button[role=switch][aria-checked=true],
		button[role=switch][aria-checked=true]::after {
			background-color: Highlight;
			color: HighlightText;
		}

		button[role=switch][aria-checked=true]::before {
			background: HighlightText;
		}
	}
}

@layer patches {
	@layer custom, utilities;

	@layer custom {
		:has(> .back-to-the-future) {
			display: block;
			perspective: 10rem;
		}

		.back-to-the-future {
			font: 900 1.25em / 1 serif;
			-webkit-text-stroke: .0625rem #ccc;
			-webkit-background-clip: text;
			-webkit-text-fill-color: transparent;
			background-image: linear-gradient(red 25%, orange, yellow 75%);
			transform: rotateY(130deg) skewX(16deg);
			position: absolute;
		}

		.galerie[role] {
			gap: 2rem;
			grid-template-columns: repeat(auto-fill, minmax(20rem, 1fr));
			grid-template-rows: minmax(10rem, auto);
			margin: 1.5rem 0;
		}

		.galerie > * {
			border: 1px solid rgba(0, 0, 0, .1);
			border-radius: .5rem;
			overflow: hidden;
			text-align: center;
		}

		.galerie img {
			margin-inline: auto;
		}

		.demo-hue {
			gap: 2rem;
			padding: 2rem;
		}

		.demo-hue > * {
			aspect-ratio: 1;
		}

		.demo-pattern,
		.has-colors {
			--chaarts-purple: #639;
			--chaarts-pink: #e11a81;
			--chaarts-blue: #0172f0;
			--chaarts-yellow: #fdc02f;
			--chaarts-green: #39ca74;
			--chaarts-red: #ff2d40;
			--chaarts-gray: #585462;
			--checkers: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='8' height='8' viewBox='0 0 8 8'><g fill='hsl(0 0% 100% / .6)'><path fill-rule='evenodd' d='M0 0h4v4H0V0zm4 4h4v4H4V4z'/></g></svg>");
			--hexagons: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='14' height='24' viewBox='0 0 28 49'><g fill-rule='evenodd'><g fill='hsl(0 0% 100% / .6)' fill-rule='nonzero'><path d='M13.99 9.25l13 7.5v15l-13 7.5L1 31.75v-15l12.99-7.5zM3 17.9v12.7l10.99 6.34 11-6.35V17.9l-11-6.34L3 17.9zM0 15l12.98-7.5V0h-2v6.35L0 12.69v2.3zm0 18.5L12.98 41v8h-2v-6.85L0 35.81v-2.3zM15 0v7.5L27.99 15H28v-2.31h-.01L17 6.35V0h-2zm0 49v-8l12.99-7.5H28v2.31h-.01L17 42.15V49h-2z'/></g></g></svg>");
			--triangles: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='8' height='16' viewBox='0 0 36 72'><g fill-rule='evenodd'><g fill='hsl(0 0% 100% / .6)'><path d='M2 6h12L8 18 2 6zm18 36h12l-6 12-6-12z'/></g></g></svg>");
			--zig: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='20' height='12' viewBox='0 0 20 12'><g fill-rule='evenodd'><g fill='hsl(0 0% 100% / .6)'><path d='M9.8 12L0 2.2V.8l10 10 10-10v1.4L10.2 12h-.4zm-4 0L0 6.2V4.8L7.2 12H5.8zm8.4 0L20 6.2V4.8L12.8 12h1.4zM9.8 0l.2.2.2-.2h-.4zm-4 0L10 4.2 14.2 0h-1.4L10 2.8 7.2 0H5.8z'/></g></g></svg>");
			--stripes: url("data:image/svg+xml,<svg width='6' height='6' viewBox='0 0 6 6' xmlns='http://www.w3.org/2000/svg'><g fill='hsl(0 0% 100% / .6)' fill-rule='evenodd'><path d='M5 0h1L0 6V5zM6 5v1H5z'/></g></svg>");
			--dots: url("data:image/svg+xml,<svg width='10' height='10' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'><g fill='hsl(0 0% 100% / .6)' fill-rule='evenodd'><circle cx='3' cy='3' r='3'/><circle cx='13' cy='13' r='3'/></g></svg>");
		}

		.demo-pattern > * {
			background: var(--color) var(--background);
		}

		.demo-pattern > :nth-of-type(6n + 1) {
			--background: var(--checkers);
		}

		.demo-pattern > :nth-of-type(6n + 2) {
			--background: var(--hexagons);
		}

		.demo-pattern > :nth-of-type(6n + 3) {
			--background: var(--triangles);
		}

		.demo-pattern > :nth-of-type(6n + 4) {
			--background: var(--zig);
		}

		.demo-pattern > :nth-of-type(6n + 5) {
			--background: var(--stripes);
		}

		.demo-pattern > :nth-of-type(6n + 6) {
			--background: var(--dots);
		}

		.demo-clip {
			background: rebeccapurple;
		}
	}

	@layer utilities {
		.u { text-decoration: underline; }

		.grid-6,
		.grid-3 { grid-template-columns: repeat(3, 1fr); }

		.align-center { align-items: center; }
		.no-margin { margin: 0; }
		.mb-0 { margin-block-end: 0; }
		.mt-0 { margin-block-start: 0; }
		.pl-1 { padding-inline-start: 1rem;	}
		.text-center { text-align: center; }
		.float-right { float: right; }
		.mt-n3 { margin-top: -3rem; }

		@media screen and (min-width: 60rem) {
			.grid-6 { grid-template-columns: repeat(6, 1fr); }
		}
	}
}

@property --integer {
	inherits: false;
	initial-value: 0;
	syntax: "<integer>";
}

@layer examples {
	@layer base, one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, donut, polar, conic;

	@layer base {
		.chaarts {
			--to-radians: 0.01745329251;
			--is-rtl: 1;

			border-collapse: collapse;
			caption-side: top;
			font-feature-settings: "tnum";
			inline-size: 100%;
			margin-block-end: 1.5rem;
			vertical-align: top;
		}

		.chaarts > caption:first-child {
			font-style: italic;
			margin: 0;
			padding: 2.5rem 1rem;
		}

		.chaarts th,
		.chaarts td {
			background-color: transparent;
			padding: .5rem .75rem;
			text-align: start;
		}

		.chaarts td {
			line-height: 1.25;
			max-inline-size: 100%;
		}

		.chaarts tbody {
			border: 1px solid hsl(0 0% 80%);
		}

		.chaarts thead {
			border: 1px solid hsl(0 0% 0%);
		}
	}

	@layer one {
		.scrollable-container {
			background:
				local linear-gradient(to right, #fff 30%, #0000) 0 0 / 2.5rem 100% no-repeat,
				local linear-gradient(to right, #0000, #fff 70%) 100% / 2.5rem 100% no-repeat,
				scroll radial-gradient(farthest-side at 0% 50%, #0004, #0000) 0 0 / 1rem 100% no-repeat,
				#fff
				scroll radial-gradient(farthest-side at 100% 50%, #0004, #0000) 100% / 1rem 100% no-repeat;
			max-inline-size: 100%;
			-webkit-overflow-scrolling: touch;
			overflow-x: auto;
			overflow-y: hidden;
		}

		.scrollable-container.example {
			max-inline-size: 50%;
		}

		.chaarts.chaarts-one caption {
			white-space: nowrap;
		}
	}

	@layer two {
		.chaarts.chaarts-two {
			border-collapse: separate;
			border-spacing: 0;
			caption-side: bottom;
			contain: content;
			empty-cells: hide;
			margin: 1.5em auto;
			overflow: hidden;
			padding: 1em;
		}

		.chaarts.chaarts-two > caption:first-child {
			font-style: normal;
			padding: 1rem 0;
		}

		.chaarts.chaarts-two th,
		.chaarts.chaarts-two td	{
			border: 0;
			padding: 0;
		}
	}

	@layer three {
		.chaarts.chaarts-three tbody {
			border: 0;
			display: flex;
			flex-wrap: wrap;
		}

		.chaarts.chaarts-three tbody tr {
			align-items: center;
			display: flex;
			flex: 1 1 auto;
		}

		.chaarts.chaarts-three tbody [scope="row"] {
			padding-inline-end: .5rem;
		}

		.chaarts.chaarts-three tbody [scope="row"]::before {
			background: var(--color, currentcolor);
			block-size: 1rem;
			content: "";
			display: inline-block;
			inline-size: 1rem;
			translate: -.2rem .1rem 0;
		}
	}

	@layer four {
		.has-colors {
			color-scheme: light;
			--background-lightness: 100%;
			--foreground-lightness: 0%;
			--diff: 4%;
			--background-lighter: hsl(0deg 0% var(--background-lightness));
			--background: hsl(0deg 0% calc(var(--background-lightness) - var(--diff)));
			--foreground: hsl(0deg 0% var(--foreground-lightness));
			--foreground-lighter: hsl(0deg 0% calc(var(--foreground-lightness) + var(--diff)));
			--foreground-o-50: hsl(0deg 0% var(--foreground-lightness) / 50%);
			--foreground-o-25: hsl(0deg 0% var(--foreground-lightness) / 25%);
			--foreground-o-10: hsl(0deg 0% var(--foreground-lightness) / 10%);
			--hue: 270;
			--lightness: 50%;
			--saturation: 100%;
			--chaarts-purple: hsl(var(--hue) calc(var(--saturation) / 2) var(--lightness));
			--chaarts-pink: hsl(calc(var(--hue) + 60) var(--saturation) var(--lightness));
			--chaarts-blue: hsl(calc(var(--hue) - 60) var(--saturation) var(--lightness));
			--chaarts-yellow: hsl(40deg var(--saturation) var(--lightness));
			--chaarts-green: hsl(calc(var(--hue) - 120) var(--saturation) var(--lightness));
			--chaarts-red: hsl(calc(var(--hue) + 90) var(--saturation) var(--lightness));
			--chaarts-gray: hsl(0deg 0% var(--lightness));
		}

		.has-colors th::before {
			background: var(--color) var(--background);
		}

		.has-colors tr:nth-of-type(6n + 1) {
			--background: var(--checkers);
		}

		.has-colors tr:nth-of-type(6n + 2) {
			--background: var(--hexagons);
		}

		.has-colors tr:nth-of-type(6n + 3) {
			--background: var(--triangles);
		}

		.has-colors tr:nth-of-type(6n + 4) {
			--background: var(--zig);
		}

		.has-colors tr:nth-of-type(6n + 5) {
			--background: var(--stripes);
		}

		.has-colors tr:nth-of-type(6n + 6) {
			--background: var(--dots);
		}

		@media (min-width: 30em) {
			.has-colors {
				--lightness: 40%;
			}
		}

		@media (prefers-color-scheme: dark) {
			.has-color:where([data-theme="dark"]) {
				color-scheme: dark;
				--background-lightness: 0%;
				--foreground-lightness: 100%;
				--background: hsl(0deg 0% calc(var(--diff) * 5));
				--foreground-lighter: hsl(0deg 0% calc(var(--foreground-lightness) - var(--diff)));
			}
		}

		@media (prefers-contrast: more) {
			.has-colors {
				--background-lighter: Canvas;
				--background: Canvas;
				--foreground: CanvasText;
				--foreground-lighter: CanvasText;
				--chaarts-purple: LinkText;
				--chaarts-pink: CanvasText;
				--chaarts-blue: Highlight;
				--chaarts-yellow: ActiveText;
				--chaarts-green: InactiveBorder;
				--chaarts-red: VisitedText;
				--chaarts-gray: ButtonShadow;
			}
		}

		.chaarts.chaarts-four {
			--radius: 32rem;
			margin: 2rem auto;
			padding-block-start: calc(var(--radius) + 2rem);
			position: relative;
		}
	}

	@layer five {
		.chaarts.chaarts-five td::before,
		.chaarts.chaarts-seven tr:last-child td::after,
		.chaarts.chaarts-twelve td::after {
			background: var(--color) var(--background);
			block-size: var(--radius);
			border-radius: 50%;
			content: '';
			inline-size: var(--radius);
			inset-block-start: calc(var(--radius) / 2);
			inset-inline-start: 50%;
			position: absolute;
			transform: translate3d(-50%, -50%, 0);
			transform-origin: center;
		}
	}

	@layer six {
		.chaarts.chaarts-six tr:last-child td::before {
			clip-path: polygon(
				50% 50%,
				50% 0%,
				100% 0%,
				93.8153% 25.9123%
			);
		}
	}

	@layer seven {
		.chaarts.chaarts-seven tr:not(:last-child) td::before {
			background: #efeee3;
		}

		.chaarts.chaarts-seven tr:last-child td::after {
			background:
				url("data:image/svg+xml,<svg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'><rect x='0' y='0' width='24' height='24' stroke='%2339ca74' stroke-width='4' fill='%23639'/></svg>") 50% 25% / 2rem no-repeat,
				var(--chaarts-purple)
				radial-gradient(
					#0000 1.25rem,
					var(--chaarts-green) 1.25rem 1.5rem,
					#0000 1.5rem
				);
			clip-path: polygon(
				50% 50%,
				93.8153% 25.9123%,
				50% 25.9123%
			);
		}
	}

	@layer eight {
		.chaarts.chaarts-eight::after,
		.chaarts.chaarts-eight::before {
			background: var(--chaarts-green);
			content: '';
			position: absolute;
			z-index: 1;
		}

		.chaarts.chaarts-eight::before {
			background: linear-gradient(
				var(--chaarts-green) 25.9123%,
				var(--chaarts-purple) 25.9123% 50%,
				#0000 50%
			);
			block-size: var(--radius);
			inset-block-start: 0;
			inset-inline-start: calc(.938153 * (100% - ((100% - var(--radius)) / 2)) + .625rem);
			inline-size: .25rem;
		}

		.chaarts.chaarts-eight::after {
			background: linear-gradient(
				to right,
				var(--chaarts-green) calc(var(--radius) / 2),
				var(--chaarts-purple) calc(var(--radius) / 2) 93.8153%,
				#0000 93.8153%
			);
			block-size: .25rem;
			inset-block-start: calc(25.9123% - 2.25rem);
			inset-inline-start: calc((100% - var(--radius)) / 2);
			inline-size: var(--radius);
		}

		.chaarts.chaarts-eight td::before {
			background-color: #efeee3;
		}

		.chaarts.chaarts-eight tr:last-child td::before {
			--part: calc(var(--value) * 3.6);
			--β: calc(var(--part) * var(--to-radians));
			--α: calc((90 - var(--part)) * var(--to-radians));
			--pos-B: calc(sin(var(--β)) * 50%);
			--pos-A: calc(sin(var(--α)) * 50%);
			background-color: var(--color);
			clip-path: polygon(
				50% 50%,
				50% 0%,
				100% 0%,
				calc(50% + var(--pos-B)) calc(50% - var(--pos-A))
			);
			opacity: .5;
		}
	}

	@layer nine {
		.chaarts.chaarts-nine td {
			--lt-25: clamp(0, 25 - var(--value), 1);
			--gt-25: calc(1 - var(--lt-25));
			--lt-50: clamp(0, 50 - var(--value), 1);
			--gt-50: calc(1 - var(--lt-50));
			--lt-75: clamp(0, 75 - var(--value), 1);
			--gt-75: calc(1 - var(--lt-75));
		}

		.chaarts.chaarts-nine td::before {
			--part: calc(var(--value) * 3.6);
			--main-angle: calc(var(--part) - (90 * (var(--gt-25, 0) + var(--gt-50, 0) + var(--gt-75, 0))));
			--β: calc(var(--main-angle) * var(--to-radians));
			--α: calc((90 - var(--main-angle)) * var(--to-radians));
			--pos-B: calc(sin(var(--β)) * 50%);
			--pos-A: calc(sin(var(--α)) * 50%);
			--polygon: polygon(
				50% 50%,
				50% 0%,
				100% 0%,
				max(50% + var(--pos-B), var(--gt-25, 0) * 100%) calc(50% - var(--pos-A) * var(--lt-25, 1)),
				max(50%, var(--gt-25, 0) * 100%) max(50%, var(--gt-25, 0) * 100%),
				max(50% + var(--pos-A) * var(--gt-25, 0), var(--gt-50, 0) * 100%) max(50% + var(--pos-B) * var(--gt-25, 0) * var(--lt-50, 0), var(--gt-50, 0) * 100%),
				max(0%, var(--lt-50, 0) * 50%) max(50%, var(--gt-50, 0) * 100%),
				min(50% - var(--pos-B) * var(--gt-75, 0), 0%) calc(50% + var(--pos-A)  * var(--gt-50, 0) * var(--lt-75, 1)),
				max(0%, var(--lt-75, 0) * 50%) max(0%, var(--lt-75, 0) * 50%),
				calc(50% - var(--pos-A) * var(--gt-75, 0)) calc(50% - var(--pos-B) * var(--gt-75, 0))
			);
			clip-path: var(--polygon);
		}
	}

	@layer ten {
		.chaarts.chaarts-ten tr:first-child {
			--value: var(--1);
			--position: 0turn;
		}

		.chaarts.chaarts-ten tr:nth-child(2) {
			--value: var(--2);
			--position: calc(var(--1) * .01turn);
		}

		.chaarts.chaarts-ten tr:nth-of-type(3n + 3) {
			--value: var(--3);
			--position: calc((var(--1) + var(--2)) * .01turn);
		}

		.chaarts.chaarts-ten tr:nth-of-type(4n + 4) {
			--value: var(--4);
			--position: calc((var(--1) + var(--3) + var(--2)) * .01turn);
		}

		.chaarts.chaarts-ten tr:nth-of-type(5n + 5) {
			--value: var(--5);
			--position: calc((var(--1) + var(--4) + var(--3) + var(--2)) * .01turn);
		}

		.chaarts.chaarts-ten tr:nth-of-type(6n + 6) {
			--value: var(--6);
			--position: calc((var(--1) + var(--5) + var(--4) + var(--3) + var(--2)) * .01turn);
		}

		.chaarts.chaarts-ten tr:nth-of-type(7n + 7) {
			--value: var(--7);
			--position: calc((var(--1) + var(--6) + var(--5) + var(--4) + var(--3) + var(--2)) * .01turn);
		}

		.chaarts.chaarts-ten td::before {
			transform: translate3d(-50%, -50%, 0) rotate(var(--position));
			transform-origin: center;
		}
	}

	@layer eleven {
		.chaarts.chaarts-eleven {
			--enter: cubic-bezier(0, .5, .5, 1);
			--exit: cubic-bezier(.5, 0, 1, .5);
			--move: cubic-bezier(.5, 0, .5, 1);
		}

		.chaarts.chaarts-eleven td::before {
			--zoom: .75;
			transform: translate3d(-50%, -50%, 0) rotate(var(--position)) scale(var(--zoom));
			transition: transform .2s var(--move);
		}

		.chaarts.chaarts-eleven tr:hover td::before {
			--zoom: .8;
		}

		.chaarts.chaarts-eleven tbody:hover tr {
			opacity: .5;
		}

		.chaarts.chaarts-eleven tbody:hover tr:hover {
			opacity: 1;
		}
	}

	@layer twelve {
		.chaarts.chaarts-twelve td::after {
			--axis: calc(var(--position) - .25turn + var(--value) * .005turn);
			--away: calc(var(--radius) / 2 - 1rem);

			background: var(--foreground-lighter);
			border-radius: 0;
			block-size: auto;
			color: var(--background-lighter);
			content: "";
			inline-size: auto;
			opacity: 0;
			padding: .5rem;
			pointer-events: none;
			transform: translate3d(-50%, -50%, 0) rotate(var(--axis)) translate(var(--away)) rotate(calc(var(--axis) * -1)) perspective(1000px) rotate3d(1, 0, 0, 45deg);
			transform-origin: 50% calc(100% + 10px);
			transition: opacity .2s var(--enter),
									transform .2s var(--enter);
			z-index: 3;
		}

		.chaarts.chaarts-twelve tr:hover td::after {
			opacity: 1;
			transform: translate3d(-50%, -50%, 0) rotate(var(--axis)) translate(var(--away)) rotate(calc(var(--axis) * -1)) perspective(1000px) rotate3d(1, 0, 0, 0deg);
			transition: opacity .2s var(--exit),
									transform .2s var(--exit);
		}
	}

	@layer thirteen {
		.chaarts.chaarts-thirteen td::after {
			--integer: calc(var(--value));

			content: var(--term) "\A0: " counter(value) "\A0%";
			counter-reset: value var(--integer);
		}
	}

	@layer fourteen {
		[dir="rtl"] .chaarts.chaarts-fourteen {
			--is-rtl: -1;
		}

		[dir="rtl"] .chaarts.chaarts-fourteen td::after {
			inset-inline-start: 40%;
		}

		[dir="rtl"] .chaarts.chaarts-fourteen [scope="row"]::before {
			translate: calc(-.2rem * var(--is-rtl, 1)) .1rem 0;
		}

		[dir="rtl"] .chaarts.chaarts-fourteen td::before {
			transform: translate3d(calc(-50% * var(--is-rtl, 1)), -50%, 0) rotate(var(--position)) scale(var(--zoom));
		}
	}

	@layer donut {
		.chaarts.chaarts-donut {
			--offset: 8rem;
			--mask: radial-gradient(
				circle at 50% calc(50% - 2rem),
				#0000 0 var(--offset),
				#ffff calc(var(--offset) + 1px) 100%
			);
			mask-image: var(--mask);
		}

		.chaarts.chaarts-donut td::after {
			--away: calc(var(--radius) / 2 - 2.5rem);
		}
	}

	@layer polar {
		.chaarts.chaarts-polar td::before,
		.chaarts.chaarts-polar tr:hover td::before {
			--zoom: 50;
			transform:
				translate3d(calc(-50% * var(--is-rtl, 1)), -50%, 0)
				rotate(var(--position))
				scale(calc((var(--zoom) + (var(--value) / (100 / var(--zoom)))) / 100));
		}

		.chaarts.chaarts-polar td::after {
			--away: calc((var(--radius) / 2) - ((var(--radius) / 4) * ((100 - var(--value)) / 100)) + 2.5rem);
		}
	}

	@layer conic {
		.chaarts-conic td::before {
			clip-path: unset;
			mask-image: conic-gradient(#ffff var(--value-percent), #0000 0);
		}
	}
}
