/* ==================== */
/* == sseeeedd
/* ==================== */
@use "sass:math";
@use "sass:list";

@import "sseeeedd-func";
@import "sseeeedd-vars";
@import "switch";

.pl-5 {
  padding-left: 5rem;
}

.fieldset {
  display: flex;
  align-items: center;
  justify-content: center;
}

.illustration[role="group"] {
  margin: $gutter * 3 auto;
  max-width: min-content;

  img {
    max-width: none;
  }
}

body > :not(.modeplan) .slide {
    overflow-x: hidden !important;

    &[id="white-slide"] {
      background: palette( default, contrast );
    }
}

/* ==================== */
/* == Tables
/* ==================== */

table {
  font-size: 1rem;
  margin: auto;
}

pre[class*="language-"] {
    overflow-y: hidden;
}

pre code[class*="language-"] {
  font-size: .875rem;
}

@media screen and (min-width: 48em) {
  pre code[class*="language-"] {
    font-size: 1.25rem;
  }
}

.table-ffoodd {
  background: palette( default, contrast );
  border-collapse: collapse;
  caption-side: top;
  font-feature-settings: "tnum";
  width: 100%;
  vertical-align: top;

  > caption:first-child {
    font-style: italic;
    margin: 0;
    padding: rem( 40 ) $gutter;
  }

  th,
  td {
    padding: $gutter * 0.5 rem( 12 );
    text-align: left;

    thead &,
    tbody & {
      border-bottom: 1px solid palette( default, secondary );
    }
  }

  th,
  table strong {
    color: palette( dominant, dark );
  }

  td {
    line-height: 1.25;
    max-width: 100%;
  }

  tbody {
    border: 1px solid palette( default, secondary );
  }
}

/* ==================== */
/* == Charts
/* ==================== */
[class*="charts"] {
  [role="presentation"] {
    display: none;
  }

  abbr[title] {
    border-bottom: 0;
    font-size: small;
    font-weight: normal;
    text-transform: none;
  }
}

/* ==================== */
/* == Table based Charts
/* ==================== */
.table-container .fieldset {
  display: none !important;
}

.table-charts {
  caption-side: bottom;
  empty-cells: hide;
  margin: 1.5em auto;
  overflow: hidden;
  padding: 1em;

  /**
   * @note Defining a CSS custom property for each inlined SVG pattern
   * @author Trys Mudford
   * @link https://www.trysmudford.com/blog/using-css-custom-properties/
   * @via Jeremy Keith
   * @link https://adactio.com/journal/15075
   */
  @each $name, $pattern in $patterns {
    --#{$name}: url("#{$pattern}");
  }

  > caption:first-child {
    background: inherit;
    font-style: normal;
    padding: $gutter 0;
  }
}

table:not(.table-charts) .sr-only {
  clip: auto !important;
  clip-path: none !important;
  height: auto !important;
  overflow: visible !important;
  position: static !important;
  width: auto !important;
  white-space: normal !important;
}

@media screen and (min-width: em(480)) {
  .table-charts {
    border-collapse: separate;
    border-spacing: 0;
    /**
     * @note Trying to improve paint & layout performances
     * @link https://developer.mozilla.org/fr/docs/Web/CSS/contain
     */
    contain: content;

    th,
    td {
      border: 0;
      padding: 0;

      &:empty {
        display: none !important;
      }
    }

    /** Bar charts */
    @supports (grid-template-columns: repeat(var(--scale, 100), minmax(0, 1fr))) {
      &.bar {

        &.step-1 {
          caption {
            text-align: initial;
            text-indent: em( 256 );
          }

          tbody tr {
            display: grid;
            grid-auto-rows: 1fr;
            grid-row-gap: $gutter * 0.5;
            grid-template-columns: minmax(min-content, em( 240 )) repeat(var(--scale, 100), minmax(0, 1fr)) 10ch;
            transition: opacity .2s map-get( $timing-functions, 'move' );

            th {
              grid-column: 1 / 1;
              margin: $gutter * 0.5 0 0;
              padding: 0 $gutter 0 0;
              text-align: right;
            }

            td {
              background: currentColor;
              grid-column: list.slash(2, var(--value, 0));
              margin: $gutter * 0.5 0 0;
              position: relative;
            }
          }
        }

        &.step-2 {
          tbody tr td span {
            background: inherit;
            -webkit-text-fill-color: transparent;
            -webkit-background-clip: text;
            font-weight: bold;
            left: 100%;
            line-height: 1.5;
            position: absolute;
          }
        }

        &.step-3 {
          tbody tr {
            td {
              --size: calc(var(--scale, 100) * 100%);
              --position: calc(var(--value, 0) / var(--scale, 100) * 100%);
              background:
                  linear-gradient(to right,
                    palette( success, dark ),
                    palette( dominant ),
                    palette( secondary ),
                    palette( accent ),
                    palette( alert )
                  ) var(--position) list.slash(0%, var(--size)) 100%,
                  transparent var(--background) center / contain;
              background-blend-mode: hard-light;
            }

            @each $name, $pattern in $patterns {
              $i: index($patterns, ($name $pattern));

              &:nth-child(#{$i}n + #{$i}) {
                --background: var(--#{$name}); /* 1 */
              }
            }
          }
        }

        &.step-4 {
          &:hover {
            tr {
              opacity: .5;
            }

            tr:hover {
              opacity: 1;
            }
          }

          /**
           * @note Custom color palette for WHCM
           * @note Inspired by Greg Whitworth's post
           * @link http://www.gwhitworth.com/blog/2017/04/how-to-use-ms-high-contrast
           */
          @media screen and (-ms-high-contrast: active) {
            td {
              background-image:
                linear-gradient(to right,
                  Window,
                  ButtonFace,
                  ButtonShadow,
                  ButtonText,
                  highlight
                ),
                var(--background);
            }
          }

          &.waterfall {
            @each $number in 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 {
              tr:nth-of-type(#{$number}) td {
                grid-column: list.slash(var(--#{$number - 1}, 2), var(--value, 0));
              }
            }
          }
        }
      }
    }

    /** Line charts */
    @supports (clip-path: polygon(0% calc(100% - (var(--1) * 100% / var(--y))))) {
      &.line {
        --offset: calc((100% / var(--x)) / 2);
        --height: calc( #{$width * 0.5} - #{$gutter * 2} );
        --bottom: calc( 100% - var(--height) );
        position: relative;
        transition:
          background .3s map-get( $timing-functions, 'move' ),
          color .3s map-get( $timing-functions, 'move' );

        &::after {
          bottom: var(--bottom);
          content: "";
          position: absolute;
          top: 0;
          width: 100%;
          z-index: 1;
        }

        tr::before {
          content: "";
          position: absolute;
        }

        [scope="row"],
        thead th:first-child {
            color: var(--color, currentColor);
            text-align: left;
        }

        th,
        td {
          background: palette( default, contrast );
          font-weight: bold;
          text-align: center;
          width: calc( 100% / var(--x) );

          &:hover {
            color: palette( secondary );
          }
        }

        &.step-1 {
            padding: var(--height) 0 $gutter;

            &::after {
              --scale: calc( ( 100% - (var(--y) * 1px) ) / var(--y) );
              background:
                repeating-linear-gradient(
                  to bottom,
                  white, white var(--scale),
                  rgba(0, 0, 0, .25) calc(var(--scale) + 1px)
                );
              bottom: var(--bottom);
              content: "";
              position: absolute;
              top: 0;
              width: 100%;
              z-index: 1;
            }
        }

        &.step-2 {
            [style]::before {
              bottom: var(--bottom);
              background: linear-gradient(to top, palette( secondary, light ), palette( alert ) 75%);
              clip-path: polygon(
                0% 100%,
                calc((100% / var(--x) * 1)) 100%,
                calc((100% / var(--x) * 1)) calc(100% - (var(--1) / var(--y) * 100%)),
                calc((100% / var(--x) * 1) + var(--offset)) calc(100% - (var(--1) / var(--y) * 100%)),
                calc((100% / var(--x) * 2) + var(--offset)) calc(100% - (var(--2) / var(--y) * 100%)),
                calc((100% / var(--x) * 3) + var(--offset)) calc(100% - (var(--3) / var(--y) * 100%)),
                calc((100% / var(--x) * 4) + var(--offset)) calc(100% - (var(--4) / var(--y) * 100%)),
                calc((100% / var(--x) * 5) + var(--offset)) calc(100% - (var(--5) / var(--y) * 100%)),
                calc((100% / var(--x) * 6) + var(--offset)) calc(100% - (var(--6) / var(--y) * 100%)),
                calc((100% / var(--x) * 7) + var(--offset)) calc(100% - (var(--7) / var(--y) * 100%)),
                calc((100% / var(--x) * 8) + var(--offset)) calc(100% - (var(--8) / var(--y) * 100%)),
                calc((100% / var(--x) * 9) + var(--offset)) calc(100% - (var(--9) / var(--y) * 100%)),
                calc((100% / var(--x) * 10) + var(--offset)) calc(100% - (var(--10) / var(--y) * 100%)),
                calc((100% / var(--x) * 11) + var(--offset)) calc(100% - (var(--11) / var(--y) * 100%)),
                calc((100% / var(--x) * 12) + var(--offset)) calc(100% - (var(--12) / var(--y) * 100%)),
                100% calc(100% - (var(--12) / var(--y) * 100%)),
                100% 100%,
                0% 100%
              );
              content: "";
              position: absolute;
              top: 0;
              width: 100%;
              z-index: 2;
            }

            [scope="col"] {
              &:not(:first-child)::after {
                background-color: palette( default, contrast );
                background-image: var(--stripes);
                background-blend-mode: exclusion;
                bottom: $gutter * 4;
                content: "";
                height: calc(100% - #{$gutter * 4});
                mix-blend-mode: soft-light;
                opacity: 0;
                position: absolute;
                transition: opacity .3s map-get( $timing-functions, 'move' );
                width: inherit;
                z-index: 3;
              }

              @each $number in 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 {
                &:nth-child(#{$number})::after {
                  left: calc(100% / var(--x) * #{$number - 1});
                }
              }

              &:hover::after {
                opacity: .75;
              }
            }
        }

        &.step-3 {
          td {
            --value: var(--1);
            --term: var(--t-1);
            --top: calc( (var(--height) - ( var(--value) / var(--y) * 100% ) ) );
            line-height: 1.5;

            &::before {
              content: '';
              height: 1.5rem;
              position: absolute;
              transform: translateX(-50%);
              width: inherit;
              z-index: 10;
            }

            /**
             * 1.
             * @note Using white-space and:
             ** `\A` to make a line-break
             ** `\A0` for a non-breakable space
             * @note Based on CSS Secrets by
             * @author Lea Verou
             * @link https://lea.verou.me/2012/02/flexible-multiline-definition-lists-with-2-lines-of-css/
             *
             * 2.
             * @note Display CSS integers custom properties with a trick using counters
             * @author Cassie Evans
             * @link https://codepen.io/cassie-codes/pen/22ea69e0f681d45f2f4c2ca5e6acf4ab
             */
            &::after {
              --arrow: calc(100% - #{$gutter * 0.25});
              background-color: palette( dominant );
              clip-path: polygon(
                0% 0%,
                100% 0%,
                100% var(--arrow),
                calc(50% - #{$gutter * 0.25}) var(--arrow),
                50% 100%,
                calc(50% + #{$gutter * 0.25}) var(--arrow),
                0% var(--arrow)
              );
              color: palette( dominant, contrast );
              content: var(--term) " " var(--year) "\A " counter(value) "\A0°C"; /* 1 */
              counter-reset: value var(--value);                                 /* 2 */
              opacity: 0;
              padding: $gutter * 0.5;
              left: calc( var(--offset) * 3 );
              pointer-events: none;
              position: absolute;
              top: var(--top, 100);
              transform-origin: 50% calc(100% + 10px);
              transform:
                translate3d(-50%, -125%, 0)
                perspective(1000px)
                rotate3d(1, 0, 0, 45deg);
              transition:
                opacity .2s map-get( $timing-functions, 'enter' ),
                transform .2s map-get( $timing-functions, 'enter' );
              will-change: opacity, transform;
              white-space: pre;
              z-index: 5;
            }

            @each $number in 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 {
              &:nth-child(#{$number})::after {
                --value: var(--#{$number - 1});
                --term: var(--t-#{$number - 1});
                --top: calc( (var(--height) - ( var(--value) / var(--y) * var(--height) ) ) );
                left: calc( ( 100% / var(--x) * #{$number - 1} ) + var(--offset) );
              }
            }

            &:hover::after {
              opacity: 1;
              transform:
                translate3d(-50%, -125%, 0)
                perspective(1000px)
                rotate3d(1, 0, 0, 0deg);
              transition:
                opacity .2s map-get( $timing-functions, 'exit' ),
                transform .2s map-get( $timing-functions, 'exit' );
            }
          }
        }

        &.points {
          [style] {
              &::before {
                background: var(--color, currentColor) var(--background);
                clip-path: polygon(
                  calc((100% / var(--x) * 1) + var(--offset)) calc(100% - (var(--1) / var(--y) * 100%)),
                  calc((100% / var(--x) * 2) + var(--offset)) calc(100% - (var(--2) / var(--y) * 100%)),
                  calc((100% / var(--x) * 3) + var(--offset)) calc(100% - (var(--3) / var(--y) * 100%)),
                  calc((100% / var(--x) * 4) + var(--offset)) calc(100% - (var(--4) / var(--y) * 100%)),
                  calc((100% / var(--x) * 5) + var(--offset)) calc(100% - (var(--5) / var(--y) * 100%)),
                  calc((100% / var(--x) * 6) + var(--offset)) calc(100% - (var(--6) / var(--y) * 100%)),
                  calc((100% / var(--x) * 7) + var(--offset)) calc(100% - (var(--7) / var(--y) * 100%)),
                  calc((100% / var(--x) * 8) + var(--offset)) calc(100% - (var(--8) / var(--y) * 100%)),
                  calc((100% / var(--x) * 9) + var(--offset)) calc(100% - (var(--9) / var(--y) * 100%)),
                  calc((100% / var(--x) * 10) + var(--offset)) calc(100% - (var(--10) / var(--y) * 100%)),
                  calc((100% / var(--x) * 11) + var(--offset)) calc(100% - (var(--11) / var(--y) * 100%)),
                  calc((100% / var(--x) * 12) + var(--offset)) calc(100% - (var(--12) / var(--y) * 100%)),
                  calc((100% / var(--x) * 13) + var(--offset)) calc(100% - (var(--12) / var(--y) * 100%)),
                  100% calc(100% - (var(--12) / var(--y) * 100%)),
                  100% calc((100% + #{$gutter * 0.25}) - (var(--12) / var(--y) * 100%)),
                  calc((100% / var(--x) * 13) + var(--offset)) calc((100% + #{$gutter * 0.25}) - (var(--12) / var(--y) * 100%)),
                  calc((100% / var(--x) * 12) + var(--offset)) calc((100% + #{$gutter * 0.25}) - (var(--12) / var(--y) * 100%)),
                  calc((100% / var(--x) * 11) + var(--offset)) calc((100% + #{$gutter * 0.25}) - (var(--11) / var(--y) * 100%)),
                  calc((100% / var(--x) * 10) + var(--offset)) calc((100% + #{$gutter * 0.25}) - (var(--10) / var(--y) * 100%)),
                  calc((100% / var(--x) * 9) + var(--offset)) calc((100% + #{$gutter * 0.25}) - (var(--9) / var(--y) * 100%)),
                  calc((100% / var(--x) * 8) + var(--offset)) calc((100% + #{$gutter * 0.25}) - (var(--8) / var(--y) * 100%)),
                  calc((100% / var(--x) * 7) + var(--offset)) calc((100% + #{$gutter * 0.25}) - (var(--7) / var(--y) * 100%)),
                  calc((100% / var(--x) * 6) + var(--offset)) calc((100% + #{$gutter * 0.25}) - (var(--6) / var(--y) * 100%)),
                  calc((100% / var(--x) * 5) + var(--offset)) calc((100% + #{$gutter * 0.25}) - (var(--5) / var(--y) * 100%)),
                  calc((100% / var(--x) * 4) + var(--offset)) calc((100% + #{$gutter * 0.25}) - (var(--4) / var(--y) * 100%)),
                  calc((100% / var(--x) * 3) + var(--offset)) calc((100% + #{$gutter * 0.25}) - (var(--3) / var(--y) * 100%)),
                  calc((100% / var(--x) * 2) + var(--offset)) calc((100% + #{$gutter * 0.25}) - (var(--2) / var(--y) * 100%)),
                  calc((100% / var(--x) * 1) + var(--offset)) calc((100% + #{$gutter * 0.25}) - (var(--1) / var(--y) * 100%))
                );
                transition: opacity .3s map-get( $timing-functions, 'move' );
              }

              th::before {
                 background: var(--color, currentColor) var(--background);
                 content: "";
                 display: inline-block;
                 height: 1rem;
                 transform: translate3d(-.2rem, .1rem, 0);
                 width: 1rem;
              }

              td {
                --top: calc( (var(--height) - ( var(--value) / var(--y) * var(--height) ) ) );

                &::before {
                  --size: #{$gutter};
                  background: var(--color, currentColor) var(--background);
                  border: 2px solid palette( default, contrast );
                  border-radius: 50%;
                  box-shadow: 0 0 #{$gutter * 0.25} rgba(0, 0, 0, .5);
                  content: "";
                  height: var(--size);
                  left: calc( var(--offset) * 3 );
                  position: absolute;
                  top: var(--top, 100);
                  transform: translate3d(calc(var(--size) / -2), calc(var(--size) / -2), 0);
                  transition:
                      opacity .3s map-get( $timing-functions, 'move' ),
                      transform .3s map-get( $timing-functions, 'move' );
                  width: var(--size);
                  z-index: 4;
                }

                @each $number in 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 {
                  &:nth-of-type(#{$number})::before {
                    --value: var(--#{$number});
                    --top: calc( (var(--height) - ( var(--value) / var(--y) * var(--height) ) ) );
                    left: calc( ( 100% / var(--x) * #{$number} ) + var(--offset) );
                  }
                }
              }
          }

          @each $name, $pattern in $patterns {
           $i: index($patterns, ($name $pattern));

           [style]:nth-child(#{$i}n + #{$i}) {
             --background: var(--#{$name}); /* 1 */
           }
         }

          tbody:hover [style]::before,
          tbody:hover [style] td::before {
              opacity: .25;
          }

          tbody:hover [style]:hover::before,
          tbody:hover [style]:hover td::before {
              opacity: 1;
          }

          tbody:hover [style]:hover td::before {
              transform:
                  translate3d(calc(var(--size) / -2), calc(var(--size) / -2), 0)
                  scale(1.25);
          }

          [scope="col"]:not(:first-child) {
            &::after {
              mix-blend-mode: multiply;
            }

            &:hover::after {
             opacity: .5;
            }
          }
        }


      /**
       * @note Custom color palette for WHCM
       * @note Inspired by Greg Whitworth's post
       * @link http://www.gwhitworth.com/blog/2017/04/how-to-use-ms-high-contrast
       */
      @media screen and (-ms-high-contrast: active) {
        &.line [style]::before {
          background: linear-gradient(to top, ButtonHighlight, Highlight 75%);
        }
      }
    }
    }

    /** Radar Charts */
    @supports(clip-path: polygon( 0% 0%, calc(100% - ( var(--1) * 100% / var(--scale) ) ) 100%, 100% 100%)) {
      .radar-container .fieldset {
        display: flex !important;
      }

      &.radar {
        --radius: 10rem;
        --unitless-radius: calc( 1024 / 16 / 5 );
        --size: calc( var(--radius) / var(--scale) );
        --part: calc( 360deg / var(--items) );
        background-image:
          repeating-radial-gradient(
            circle at 50%,
            rgba(0, 0, 0, .2),
            rgba(0, 0, 0, .2) 2px,
            transparent 0,
            transparent calc(var(--size) * var(--step))
          ),
          repeating-radial-gradient(
            circle at 50%,
            rgba(0, 0, 0, .1),
            rgba(0, 0, 0, .1) 2px,
            transparent 0,
            transparent var(--size)
          );
        border: 2px solid;
        border-radius: 50%;
        contain: layout;
        counter-reset: scale var(--scale);
        height: calc( var(--radius) * 2 );
        margin: auto;
        overflow: visible;
        position: relative;
        width: calc( var(--radius) * 2 );

        caption {
          background: none;
          bottom: $gutter * -10;
          position: absolute;
        }

        &.step-1 {
          /**
           * Placing items around a circle based on:
           * @link https://stackoverflow.com/questions/12813573/position-icons-into-circle
           * @link http://dabblet.com/gist/3866686
           * @author Ana Tudor
           *
           * @note Negative values for radius helps to start at the top left corner
           */
          [scope="col"] {
            --away: calc( (var(--radius) * -1) - 50% );
            left: 50%;
            margin: 0;
            padding: 0 $gutter;
            position: absolute;
            top: 50%;
            transform:
              translate3d(-50%, -50%, 0)
              rotate( calc(var(--part) * var(--index, 1)) )
              translate( var(--away) )
              rotate( calc(var(--part) * var(--index, 1) * -1) );
          }

          @each $number in 1, 2, 3, 4, 5, 6, 7 {
            td:nth-of-type(#{$number}),
            [scope="col"]:nth-of-type(#{$number}) {
              --index: #{$number};
            }
          }

        [scope="col"] {
            &::after {
              color: palette( accent );
              display: block;
              font-size: small;
              font-weight: 400;
            }

            /**
             * 1.
             * @note Display CSS integers custom properties with a trick using counters
             * @author Cassie Evans
             * @link https://codepen.io/cassie-codes/pen/22ea69e0f681d45f2f4c2ca5e6acf4ab
             */
            @each $number in 1, 2, 3, 4, 5, 6, 7 {
              &:nth-child(#{$number})::after {
                counter-reset: value var(--#{$number});           /* 1 */
                content: counter(value) "\A0/\A0" counter(scale); /* 1 */
              }
            }
          }
        }

        &.step-2 {
          /**
           * This is quite sophisticated, we're mixing multiple techniques
           *
           * @note Setting items as parts of the circle:
           * @link https://tympanus.net/codrops/2013/08/09/building-a-circular-navigation-with-css-transforms/
           * @author Sara Soueidan
           *
           * @note Because we skew items, clip-path() needs to take skew angle into account
           * @note To do so, we need to know skewed width (which is hypothenuse of the resulting triangle)
           * @note We only know two angles (skew one + suqare one) and a side (initial width),
           * @note So we need to compute the sinus of the opposite angle to get hypothenuse
           * @note Thanks god, Stereokai made trigonometry functions in pure CSS:
           *
           * @note Trigonometry functions based on:
           * @link https://gist.github.com/stereokai/7666bfe93929b14c2dced148c79e0e97
           * @author Stereokai
           */
          td {
            --skew: calc( 90deg - var(--part) );
            border-bottom: 1px solid palette( accent, light );
            height: 50%;
            left: 0;
            margin: 0;
            position: absolute;
            top: 0;
            width: 50%;

            @each $number in 1, 2, 3, 4, 5, 6, 7 {
              &:nth-of-type(#{$number}) span {
                --pos: calc( 100% - (var(--#{$number + 1}) * 100% / (var(--scale) * var(--ratio) ) ) );
                clip-path: polygon(
                  100% var(--pos),
                  calc( 100% - ( var(--#{$number}) * 100% / var(--scale) ) ) 100%,
                  100% 100%
                );
              }
            }

            &::after,
            &::before {
              display: none;
            }
          }

          span {
            --ratio: 1;
            background: linear-gradient(
              to top left,
              palette( accent, light ) 10%,
              palette( secondary, dark ) 75%
            );
            filter: drop-shadow( 0 0 $gutter palette( accent, dark ) );
            height: 100%;
            position: absolute;
            width: 100%;
          }
        }

        &.step-3 {
            td {
                transform:
                  rotate( calc(var(--part) * var(--index, 1)) )
                  skew( var(--skew) );
                transform-origin: 100% 100%;
            }
        }

        &.step-4 {
          span {
            --opposite: calc( 180 - (90 + (90 - (360 / var(--items)))) );
            // get opposite angle in radians
            --angle: calc( var(--opposite) * 0.01745329251 );
            // calc() sin, dark wizardry!
            @include sin(angle);
            // calc() hypothenuse
            --hypo: calc( var(--unitless-radius) / var(--sin-angle) );
            // get the ratio: skewed / initial width
            --ratio: calc( var(--hypo) / var(--unitless-radius) );
            will-change: clip-path;
            transition: clip-path .5s ease-in-out;
        }
      }

        &.radar-multiple {
          margin-bottom: $gutter * 12;

            [scope="col"]::after {
                display: none;
            }

          tbody {
            columns: var(--areas);
            vertical-align: bottom;
          }

          [scope="row"] {
            bottom: $gutter * -8;
            height: $gutter * 2;
            left: $gutter;
            position: absolute;

            &::before {
              background: var(--color, currentColor);
              content: "";
              display: inline-block;
              height: $gutter;
              margin-right: $gutter * 0.25;
              transform: translate3d(0, .1rem, 0);
              width: $gutter;
            }
          }

          // Allowing more areas :)
          @each $number in 1 {
            tr:nth-child(#{$number + 1}) [scope="row"] {
              left: calc( #{$gutter} + (100% / var(--areas)) * #{$number});
            }
          }

          td {
            align-items: flex-end;
            border-color: var(--color, currentColor);
            display: flex;
            justify-content: flex-end;
            opacity: .5;
            pointer-events: none;
            transition: opacity .2s map-get( $timing-functions, 'move' );
            will-change: opacity;
            z-index: 0;

            &::after {
              color: var(--color, currentColor);
              display: block;
              font-size: small;
              font-weight: 700;
              text-indent: #{math.div($gutter, -2)};
              transform:
                skew( calc( var(--skew) * -1 ) )
                rotate( calc( var(--part) * var(--index, 1) * -1 ) );
              transform-origin: 0 0;
              transition: inherit;
              width: 100%;
              will-change: inherit;
              white-space: nowrap;
            }

            @each $number in 1, 2, 3, 4, 5, 6, 7 {
              &:nth-of-type(#{$number})::after {
                counter-reset: value var(--#{$number}); /* 1 */
                content: counter(value);                /* 1 */
                width: calc( var(--#{$number}) * 100% / var(--scale) );
              }
            }
          }

          span {
            background: var(--color, currentColor);
            pointer-events: auto;

            @supports ( mask-image: url() ) {
              mask-image: radial-gradient(circle at bottom right, rgba(0,0,0,1), rgba(0,0,0,.5));
            }
          }

          @media (hover: hover) {
            td {
              opacity: .25;

              &::after {
                opacity: 0;
              }
            }

            tr:hover td {
              opacity: 1;
              z-index: 1;

              &::after {
                opacity: inherit;
              }
            }
          }
        }
      }
    }

    /** Pie charts */
        @supports (clip-path: polygon( 50% calc( 50% + ( var(--gt-25, 0) ) ) )) {
          .pie-container .fieldset {
            display: flex !important;
          }

          &.pie {
              &.step-1 {
                margin: 0 auto;
                padding-top: calc(#{$width * 0.5} - #{$gutter * 2});
                position: relative;

                tbody {
                  --side: calc( #{$width} / 2 );
                  --hypo: calc( 1024 / 16 / 2 );
                  display: table-row;
                }

                tr {
                  display: table-cell;
                  transition: opacity .3s map-get( $timing-functions, 'move' );
                  will-change: opacity;
                }

                @each $name, $pattern in $patterns {
                  $i: index($patterns, ($name $pattern));

                  tr:nth-child(#{$i}n + #{$i}) {
                    --background: var(--#{$name}); /* 1 */
                  }
                }

                [scope="row"] {
                  padding-right: $gutter * 0.5;

                  &::before {
                    background: var(--color, currentColor) var(--background);
                    content: "";
                    display: inline-block;
                    height: $gutter;
                    transform: translate3d(-.2rem, .1rem, 0);
                    width: $gutter;
                  }
                }
            }

            &.step-2 {
                td {
                  --position: calc(var(--start, 0) * .01turn);
                }

                td::after,
                td::before {
                  left: 50%;
                  position: absolute;
                  top: 40%;
                  transform-origin: center center;
                }

                /**
                 * Using clip-path + calc() + transform + CSS vars
                 * Using mask-image to make a circle
                 *
                 * @note Based on Ana Tudor's work
                 * @link https://css-tricks.com/1-html-element-5-css-properties-magic/
                 * @author Ana Tudor
                 *
                 * @note Using a Roma Komarov's idea about boolean custom properties
                 * @link https://www.kizu.ru/conditions-for-css-variables/
                 *
                 * @note Mask support:
                 * @link https://caniuse.com/#search=mask
                 */
                td::before {
                  --zoom: .75;
                  --part: calc( var(--value) * 3.6 );
                  --main-angle: calc( var(--part) - ( 90 * ( var(--gt-25, 0) + var(--gt-50, 0) + var(--gt-75, 0) ) ) );
                  --β: calc( var(--main-angle) * 0.01745329251 );
                  --α: calc( ( 90 - var(--main-angle) ) * 0.01745329251 );
                  @include sin(β);
                  @include sin(α);
                  --B: calc( var(--hypo) * var(--sin-β) );
                  --A: calc( var(--hypo) * var(--sin-α) );
                  --pos-B: calc( ( var(--B) * 100 / var(--hypo) ) / 2 );
                  --pos-A: calc( ( var(--A) * 100 / var(--hypo) ) / 2 );
                  background: var(--color, currentColor) var(--background);
                  clip-path: polygon(
                    50% 50%,
                    50% 0%,
                    100% 0%,
                    calc( 50% + ( var(--pos-B) * 1% * var(--lt-25, 1) ) + ( var(--gt-25, 0) * 50% ) ) calc( 50% - ( var(--pos-A) * 1% * var(--lt-25, 1) ) ),
                    calc( 50% + ( var(--gt-25, 0) * 50% ) )                                           calc( 50% + ( var(--gt-25, 0) * 50% ) ),
                    calc( 50% + ( var(--pos-A) * 1% * var(--lt-50, 1) ) + ( var(--gt-50, 0) * 50% ) ) calc( 50% + ( var(--pos-B) * 1% * var(--lt-50, 1) ) + ( var(--gt-50, 0) * 50% ) ),
                    calc( 50% - ( var(--gt-50, 0) * 50% ) )                                           calc( 50% + ( var(--gt-50, 0) * 50% ) ),
                    calc( 50% - ( var(--pos-B) * 1% * var(--lt-75, 1) ) - ( var(--gt-75, 0) * 50% ) ) calc( 50% + ( var(--pos-A) * 1% * var(--lt-75, 1) ) ),
                    calc( 50% - ( var(--gt-75, 0) * 50% ) )                                           calc( 50% - ( var(--gt-75, 0) * 50% ) ),
                    calc( 50% - ( var(--pos-A) * 1% * var(--gt-75, 0) ) )                             calc( 50% - ( var(--pos-B) * 1% * var(--gt-75, 0) ) ),
                    50% 50%
                  );
                  content: '';
                  height: var(--side);
                  mask-image: radial-gradient(
                    circle at center,
                    palette( default, contrast) 0%,
                    palette( default, contrast) calc(var(--side) / 2),
                    transparent calc(var(--side) / 2)
                  );
                  transform:
                    translate3d(-50%, -50%, 0)
                    rotate( var(--position) )
                    scale( var(--zoom) );
                  transition: transform .2s map-get( $timing-functions, 'move' );
                  width: var(--side);
                  will-change: transform;
                }

                tr:hover td::before {
                  --zoom: .8;
                }

                td::after {
                  --arrow: calc(100% - #{$gutter * 0.25});
                  --axis: calc( var(--position) - .25turn + var(--value) * .005turn );
                  --away: calc( var(--side) / 2 - #{$gutter} );
                  background-color: palette( dominant );
                  color: palette( dominant, contrast );
                  content: var(--term) "\A0: " counter(value) "\A0%";
                  counter-reset: value var(--value);
                  opacity: 0;
                  padding: $gutter * 0.5;
                  pointer-events: none;
                  transform-origin: 50% calc(100% + 10px);
                  transform:
                    translate3d(-50%, -50%, 0)
                    rotate( var(--axis) )
                    translate( var(--away) )
                    rotate( calc( var(--axis) * -1 ) )
                    perspective(1000px)
                    rotate3d(1, 0, 0, 45deg);
                  transition:
                    opacity .2s map-get( $timing-functions, 'enter' ),
                    transform .2s map-get( $timing-functions, 'enter' );
                  will-change: opacity, transform;
                }

                tbody:hover tr {
                  opacity: .5;

                  &:hover {
                    opacity: 1;
                  }

                  &:hover td::after {
                    opacity: 1;
                    transform:
                      translate3d(-50%, -50%, 0)
                      rotate( var(--axis) )
                      translate( var(--away) )
                      rotate( calc( var(--axis) * -1 ) )
                      perspective(1000px)
                      rotate3d(1, 0, 0, 0deg);
                    transition:
                      opacity .2s map-get( $timing-functions, 'exit' ),
                      transform .2s map-get( $timing-functions, 'exit' );
                  }
                }
              }
          }

          &.pie.step-2.polar {
            td::before {
              --zoom: 50;
              transform:
                translate3d(-50%, -50%, 0)
                rotate( var(--position) )
                scale( calc( ( var(--zoom) + ( var(--value) / ( 100 / var(--zoom) ) ) ) / 100 ) );
            }

            tr:hover td::before {
              --zoom: 50;
            }
          }

          &.donut {
             mask-image: radial-gradient(
               circle at 50% calc(50% - #{$gutter * 2}),
               transparent 0%,
               transparent var(--offset),
               palette( default, contrast) calc(var(--offset) + 1px),
               palette( default, contrast) 100%
             );

             td::after {
               --away: calc( var(--side) / 2 - #{$gutter * 2.5} );
             }
           }

          /**
           * @note Custom color palette for WHCM
           * @note Inspired by Greg Whitworth's post
           * @link http://www.gwhitworth.com/blog/2017/04/how-to-use-ms-high-contrast
           */
          @media screen and (-ms-high-contrast: active) {
            &.pie {
              tbody tr *::before {
                background-color: Window;
              }

              tbody tr:nth-of-type(odd) *::before {
                background-color: WindowText;
              }
            }
          }
      }
    }
}
